#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
# A quick and dirty k8s configuration management tool.
# TODO:
#   - Add more robust replacements that can modify existing values.
#   - Rewrite in golang when POC is complete.

# Ensure the required dependencies are installed.
for d in jq yq kubectl envsubst; do which "$d" >/dev/null || {
  echo "not installed: $d"
  exit 1
}; done

# Configure the manifest file we'll be looking for.
ASSEMBLY_FILE="assembly.yml"

# Create temporary file to hold errors that may occur in subshells.
ERRORS=$(mktemp)
function error { echo "${@}" >> ${ERRORS}; }
trap "exit 1" HUP INT PIPE QUIT TERM
trap 'rm -rf "$ERRORS"' EXIT
# ^ delete temp file after the program exits

function usage {
  cat <<EOF
Usage: kubectl build <path>... | kubectl apply -f -

Assemble and configure yaml manifests from \`${ASSEMBLY_FILE}\` files.

resources:                           # resources specify yaml files to combine
                                     # into a single yaml output stream.
- path/to/file.yml                   # explicitly include a file
- path/to/bare/directory             # collect all yml files within
- path/to/assembly/directory         # when ${ASSEMBLY_FILE} in root, process it

vars:                                # vars specify variables that can be
                                     # overridden by environment variables.
- name: CLUSTER_HOST                 # name is the variable name
  value: test.com                    # value is an inline value for the var
  valueFromFile: path/to/file        # valueFromFile is an external file that
                                     # contains the desired value. valueFromFile
                                     # trumps value.

patches:                             # patches specify "indirect" modifications
                                     # to resources included in this file
- target:                            # start patch, every resource included will be compared
    kind: Service                    # against the keys under the target. target must be
    metadata:                        # specified fully enough to match exactly one manifest.
      name: my-service               # any keys/values can be used for matching.
  replacements:                      # start list of changes to make to manifest
  - path: spec.virtualhost.fqdn      # json path pointing to the field to modify
    value: service.\${CLUSTER_HOST}   # the value to insert
EOF
}

# getConfig takes a path to a yaml encoded assembly file and echos it to stdout
# as a single json line with all variables in the config / environment applied.
function getConfig() {
  local configFile="${1}"
  local rawConfig
  if ! rawConfig=$(yq r -j "${configFile}"); then
    error "parsing: ${configFile}"
    return 1
  fi
  # Get any vars defined (not required to be present, failures okay)
  local vars=$(echo "${rawConfig}" | jq -cr '.vars[]' 2> /dev/null)
  if [[ "${vars}" != "" ]]; then
    # Iterate through each variable, setting if it isn't already provided in
    # the environment.
    for var in ${vars}; do
      # Extract variable name.
      local varName
      if ! varName=$(jq -re '.name' <<<"${var}"); then
        error "${configFile}: vars: ${var} has no name."
        return 1
      fi
      # This insane garbage determines if the variable is set in the
      # environment already.
      if ! compgen -e -X "!$varName" >/dev/null; then
        local value
        # If var is not set in environment, see if there is a value expected in
        # an external file
        local varFromFile
        if valueFromFile=$(jq -rec '.valueFromFile' <<<"${var}"); then
          # Try to read external file and fail with useful error if it does not
          # work.
          if ! value=$(cat ${root}/${valueFromFile}); then
            error "${configFile}: vars: ${var}"
            return 1
          fi
        elif ! value=$(jq -re '.value' <<<"${var}"); then
          # If there was no external file referenced, see if there was an inline
          # variable value specified.
          error "${configFile}: vars: ${var} unable to determine value"
          return 1
        fi
        # Export value so envsubst will see it.
        eval export ${varName}="${value}" >/dev/null
      fi
    done
  fi
  # Rebuild config using supplied variables.
  envsubst <<<"${rawConfig}"
}

# assembly collects yaml manifests enumerated in an "assembly" file, applies
# patches defined within and streams the modified results to standard out.
function assembly() {
  # Save path passed to this function, it is the directory relative to which
  # resources inside the config are defined.
  local root=${1}
  local configFile=${root}/${ASSEMBLY_FILE}
  # Attempt to read the assembly file.
  local config; config=$(getConfig "${configFile}") || return 1
  # Get any resources are targeted (not required to be present, failures okay).
  local targets=$(echo "${config}" | jq -cr '.resources[]' 2> /dev/null)
  if [[ "${targets}" != "" ]]; then
    # Actually collect all resources targetted.
    local resources
    resources=$(echo "${targets}" | collect "${root}") || return 1
    # Get any patches (not required to be present, failures okay).
    local patches
    if patches=$(echo "${config}" | jq -cr '.patches[]' 2> /dev/null); then
      # Apply any found patches to the resources targetted.
      echo "${patches}" | patch "${resources}" || return 1
    else
      # Otherwise, just output resources.
      echo "${resources}"
    fi
  fi
}

# collect takes a newline separated list resource paths over standard in with
# the root directory of the paths supplied as the first argument. it outputs
# the underlying yaml found in each of the files as json.
function collect() {
  local root=${1}
  cd "${root}"
  while read item; do
    local subPath="${root}/${item}"
    local subAssembly="${item}/${ASSEMBLY_FILE}"
    if [[ -f "${subAssembly}" ]]; then
      # If a resource points to a directory that contains an assembly file,
      # run assembly on it and collect the output. This is recursive and can
      # be nested as deeply as needed.
      assembly "${subPath}"
    else
      # If the resource pointed to does not contain an assembly file, collect
      # the raw file pointed to or, in the case of a directory, every file
      # within that has a .yml extension.
      for file in $(find ${subPath} -type f -name "*.yml"); do
        if ! yq r -j -d'*' "${file}"; then
          error "parsing: ${file}"
          return 1
        fi
      done
    fi
  done
}

# patch receives a newline separated list of json documents (jsonl) and applies
# patches to matching documents from a manifest of replacements supplied as the
# first argument. it outputs the results to standard out.
function patch() {
  local manifests="${1}"
  # Iterate through each patch, applying it to the desired target.
  while read patch; do
    # Collect the target for the patch, this will be used to filter manifests
    # to find the one that should be modified.
    local filter
    if ! filter=$(echo "${patch}" | jq -ce '.target'); then
      error "patch: no target: ${patch}"
      return 1
    fi
    # Produce a JQ expression that can apply the replacements.
    local replacements
    if ! replacements=$(echo "${patch}" | jq -rc '.replacements | map("."+(.path)+" = "+(.value|tojson)) | join(" | ")'); then
      error "patch: replacements: ${patch}"
      return 1
    fi
    # Find the matching manifest based on the target provided.
    local matched
    if ! matched=$(echo "${manifests}" | jq -c 'select(contains('${filter}'))'); then
      error "patch: matching failure: ${patch}"
      return 1
    fi
    # Check the number of manifests that matched the target.
    local matchCount=$(echo "${matched}" | grep -v ^$ | wc -l | tr -d "[:space:]")
    # A patch can only target a single manifest (currently). If none or more
    # than one are found, error and exit.
    if [[ ${matchCount} != 1 ]]; then
      error "patch: ${patch} matches ${matchCount} resources, wanted 1."
      return 1
    fi
    # Find all unmatched manifests (so they can be saved through each iteration)
    local unmatched=$(echo "${manifests}" | jq -c 'select(contains('${filter}') | not)')
    # Overwrite the manifest listing with modifications supplied, the next
    # loop through will do the same.
    manifests="$(echo "${unmatched}" && (echo "${matched}" | jq -c ". | ${replacements}"))"
  done
  echo "${manifests}"
}

# Show help if no path is defined.
if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

# Assemble output to json.
if ! output="$(assembly ${PWD}/${1})"; then
  cat "${ERRORS}"
  exit 1
fi

# Convert patched json lines back to yaml.
for line in ${output}; do
  echo "---"
  echo "${line}" | yq r -P -
done